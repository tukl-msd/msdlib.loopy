specification CPP

backend java {
    package de.hopp.generator.model.cpp
    import java.lang.String
    import java.lang.Boolean
    import java.lang.Integer
}

root MFile InFile

external String
external Boolean
external Integer


// file and class model
MFile ( MDocumentation doc, String name, String directory, MPreProcDirs dirs, MStructs structs, MEnums enums, MAttributes attributes, MProcedures procedures, MClasses classes )
MClass ( MDocumentation doc, MModifiers modifiers, String name, MExtends extend, 
	 MStructs structs, MEnums enums, MAttributes attributes, MMethods methods, MClasses nested )
MModifier = MVisibility | CONSTANT() | STATIC() | INLINE()
// modifiers obviously allow invalid combinations. We rely on the programmer to refrain from using these
MVisibility = PUBLIC() | PRIVATE()
MExtend( MVisibility visibility, MType type )

// preprocessing directives
MPreProcDir = MDef    ( MDocumentation doc, MModifiers modifiers, String name, String value, MIncludes needed )
            | MPreIF  ( MModifiers modifiers, String cond, MPreProcDir thenDir)
            | MPreITE ( MModifiers modifiers, String cond, MPreProcDir thenDir, MPreProcDir elseDir)

// struct and enum model
MStruct     ( MDocumentation doc, MModifiers modifiers, String name, MAttributes attributes )
MEnum       ( MDocumentation doc, MModifiers modifiers, String name, Strings values ) // TODO maybe add code fragments here... --> MValue(String name, String value), MValues * MValue

// attribute model
MAttribute ( MDocumentation doc, MModifiers modifiers, MAnyType type, String name, MInitial initial )
MInitial = MCodeFragment | MInitList
MCodeFragment ( String part, MIncludes needed )
MInitList ( Strings params, MIncludes needed )

// method model
MProcedure ( MDocumentation doc, MModifiers modifiers, MReturnType returnType, String name, MParameters parameter, /* MTypes exceptions, */ MCode body )
MReturnType = MAnyType // note, that this allows array types to be used for return values
            | MVoid()  // however, introducing a new type would be overkill here
                       // we rely on the programmer to refrain from creating such types

MParameter ( MParamType refType, MAnyType type, String name )
MParamType = VALUE() | REFERENCE() | CONSTREF()
MCode ( Strings lines, MIncludes needed )

// constructors and destructors
MConstr ( MDocumentation doc, MModifiers modifiers, MParameters parameter, MMemberInits init, MCode body )
MDestr  ( MDocumentation doc, MModifiers modifiers, MParameters parameter, MCode body )

MMemberInit  ( String name, Strings params )

MMethod = MProcedure | MConstr | MDestr

// type system model
MAnyType = MType             ( String name, Strings doc )
//       | StructType ( String name, Strings doc ) // can also be done with "usual" type by adding "struct "
//       | EnumType   ( String name, Strings doc ) // can also be done with "usual" type by adding "enum "
//       | ClassType  ( String name, Strings doc ) // can also be done with "usual" type by adding "class "
         | MArrayType        ( MAnyType type, String length )
         | MPointerType      ( MAnyType type )
         | MConstPointerType ( MAnyType type )

MInclude = MQuoteInclude   ( MVisibility vis, String name )
         | MBracketInclude ( MVisibility vis, String name )
         | MForwardDecl    ( MVisibility vis, String name ) // name here encodes the declaration of the method

// documentation
MDocumentation ( Strings doc, MTags tags )

MTag = DEPRECATED ( Strings details )
     | SEE        ( String see )
     | PARAM      ( String name, Strings details )
     | RETURN     ( Strings details )
     | SINCE      ( String date )
     | AUTHOR     ( String name )

// list types
Strings             * String
MFiles              * MFile
MClasses            * MClass
MModifiers          * MModifier
MPreProcDirs        * MPreProcDir
MStructs            * MStruct
MEnums              * MEnum
MAttributes         * MAttribute
MProcedures         * MProcedure
MMethods            * MMethod
MParameters         * MParameter
MExtends            * MExtend
MTypes              * MType
MIncludes           * MInclude
MTags               * MTag
MMemberInits        * MMemberInit
